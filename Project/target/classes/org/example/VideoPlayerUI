import org.bytedeco.javacv.FFmpegFrameGrabber;
import org.bytedeco.javacv.Java2DFrameConverter;
import org.bytedeco.javacv.Frame;
import javax.swing.*;
import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.image.BufferedImage;
import java.io.IOException;
import java.nio.ShortBuffer;
import javax.sound.sampled.*;

public class VideoPlayerUI extends JFrame {
   private JButton playButton;
   private JButton pauseButton;
   private JButton resetButton;
   private JLabel displayLabel;
   private Thread videoThread;
   private FFmpegFrameGrabber frameGrabber;
   // オーディオ再生用の変数
   private SourceDataLine soundLine = null;
   private static final int BUFFER_SIZE = 32768;//32kB

   public VideoPlayerUI(String matchedVideoPath, int matchedFrameIndex) {
      playButton = new JButton("Play");
      pauseButton = new JButton("Pause");
      resetButton = new JButton("Reset");
      displayLabel = new JLabel();

      this.setLayout(new FlowLayout());
      this.add(displayLabel);
      this.add(playButton);
      this.add(pauseButton);
      this.add(resetButton);

      this.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
      this.setSize(640, 480);

      playButton.addActionListener(e -> playVideoFromFrame(matchedVideoPath, matchedFrameIndex));
      pauseButton.addActionListener(e -> pauseVideo());
      resetButton.addActionListener(e -> resetVideo(matchedVideoPath));
   }

   public void playVideoFromFrame(String videoPath, int frameIndex) {
      if (videoThread != null && videoThread.isAlive()) {
         return; // Do nothing if already playing
      }

      videoThread = new Thread(() -> {
         try (
               FFmpegFrameGrabber frameGrabber = new FFmpegFrameGrabber(videoPath)) {
            frameGrabber.start();
            frameGrabber.setFrameNumber(frameIndex);

            // Initialize audio line
            initAudio(frameGrabber);

            // Get and display frame rate
            double frameRate = frameGrabber.getFrameRate();
            System.out.println("Frame Rate: " + frameRate);

            Frame frame;
            while ((frame = frameGrabber.grabFrame()) != null) {
               BufferedImage image = new Java2DFrameConverter().convert(frame);
               if (image != null) {
                  long startTime = System.currentTimeMillis(); // Time before processing

                  ImageIcon icon = new ImageIcon(image);
                  displayLabel.setIcon(icon);

                  long endTime = System.currentTimeMillis(); // Time after processing
                  System.out.println("UI update time: " + (endTime - startTime) + " ms");

               }
               // Process audio frame
               if (frame.samples != null) {
                  ShortBuffer channelSamplesShortBuffer = (ShortBuffer) frame.samples[0];
                  short[] samples = new short[channelSamplesShortBuffer.capacity()];
                  channelSamplesShortBuffer.get(samples);
                  byte[] data = shortToByte(samples);
                  soundLine.write(data, 0, data.length);
               }

               try {
                  long sleepTime = (long) (1000 / frameGrabber.getFrameRate());
                  System.out.println("SleepTime: "+sleepTime);
//                  Thread.sleep(sleepTime);
                  Thread.sleep(3);
               } catch (InterruptedException ex) {
                  break;
               }
            }
            frameGrabber.stop();
         } catch (IOException ex) {
            ex.printStackTrace();
         }
      });
      videoThread.start();
   }
   private void pauseVideo() {
      if (videoThread != null) {
         videoThread.interrupt();
      }
   }

   private void resetVideo(String videoPath) {
      pauseVideo();
      playVideoFromFrame(videoPath, 0);
   }

   private void initAudio(FFmpegFrameGrabber frameGrabber) {
      try {
         AudioFormat audioFormat = new AudioFormat(frameGrabber.getSampleRate(), 16, frameGrabber.getAudioChannels(), true, false);
         DataLine.Info info = new DataLine.Info(SourceDataLine.class, audioFormat);
         soundLine = (SourceDataLine) AudioSystem.getLine(info);
         soundLine.open(audioFormat, BUFFER_SIZE);
         soundLine.start();
      } catch (LineUnavailableException e) {
         e.printStackTrace();
         JOptionPane.showMessageDialog(this, "Unable to open audio line: " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
      }
   }

   private byte[] shortToByte(short[] samples) {
      byte[] data = new byte[samples.length * 2];
      for (int i = 0; i < samples.length; i++) {
         data[i * 2] = (byte) (samples[i] & 0xff);
         data[i * 2 + 1] = (byte) ((samples[i] >> 8) & 0xff);
      }
      return data;
   }

}
